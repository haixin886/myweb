
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// 确保在所有环境中API密钥正确加载
const SUPABASE_URL = "https://kvekonddtzqqkubqjelh.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt2ZWtvbmRkdHpxcWt1YnFqZWxoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYzMzMzMjEsImV4cCI6MjA2MTkwOTMyMX0.noHqgWE1f4RPAHYXic7vhCPJ3YQWQh-M89qWdiy5SMI";

// 使用服务端令牌，绕过RLS限制
const SERVICE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt2ZWtvbmRkdHpxcWt1YnFqZWxoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NjMzMzMyMSwiZXhwIjoyMDYxOTA5MzIxfQ.HZFurDjvCu0nhWC3dYNS11U6lowz5O2pcQJt5_Bf5pU";

// 验证API密钥是否有效
if (!SUPABASE_URL || !SERVICE_KEY) {
  console.error("Supabase配置错误: URL或服务密钥缺失");
}

console.log("Supabase配置已加载:", {
  url: SUPABASE_URL,
  hasPublishableKey: !!SUPABASE_PUBLISHABLE_KEY,
  hasServiceKey: !!SERVICE_KEY
});

// 定义错误处理函数
const handleSupabaseError = (error: any, operation: string) => {
  console.error(`Supabase ${operation} 操作失败:`, error);
  if (error.message?.includes("API key")) {
    console.error("API密钥验证失败，请检查密钥配置");
  }
  return error;
};

// 创建两个客户端：一个用于普通用户操作，一个用于管理员操作

// 普通客户端配置 - 用于用户认证等操作
const supabaseConfig = {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true
  },
  global: {
    headers: {
      'X-Client-Info': '@supabase/js'
    },
  },
};

// 管理员客户端配置 - 用于需要绕过RLS的操作
const adminSupabaseConfig = {
  auth: {
    persistSession: false, // 不持久化会话
  },
  global: {
    headers: {
      'apikey': SERVICE_KEY,
      'Authorization': `Bearer ${SERVICE_KEY}`,
    },
  },
};

// 创建普通客户端
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  supabaseConfig
);

// 创建管理员客户端
export const adminSupabase = createClient<Database>(
  SUPABASE_URL,
  SERVICE_KEY,
  adminSupabaseConfig
);

// 测试管理员客户端连接
adminSupabase.auth.getSession().then(({ data, error }) => {
  if (error) {
    console.error("管理员客户端初始化失败:", error);
  } else {
    console.log("管理员客户端初始化成功");
  }
});

// 导出带错误处理的认证状态帮助函数
export const getSession = async () => {
  try {
    const { data, error } = await supabase.auth.getSession();
    if (error) {
      handleSupabaseError(error, "获取会话");
      return null;
    }
    return data;
  } catch (error) {
    handleSupabaseError(error, "获取会话");
    return null;
  }
};

export const getCurrentUser = async () => {
  try {
    const { data, error } = await supabase.auth.getUser();
    if (error) {
      handleSupabaseError(error, "获取用户");
      return null;
    }
    return data.user;
  } catch (error) {
    handleSupabaseError(error, "获取用户");
    return null;
  }
};

// 导出管理员数据操作函数
export const adminQuery = async (table: string, query: any) => {
  try {
    const result = await query;
    if (result.error) {
      handleSupabaseError(result.error, `管理员查询表 ${table}`);
      throw result.error;
    }
    return result.data;
  } catch (error) {
    handleSupabaseError(error, `管理员查询表 ${table}`);
    throw error;
  }
};

