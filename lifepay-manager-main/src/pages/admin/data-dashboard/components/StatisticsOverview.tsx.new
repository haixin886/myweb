import { useState } from "react";
import { Card } from "@/components/ui/card";
import { useQuery } from "@tanstack/react-query";
import { RefreshCw } from "lucide-react";
import { Button } from "@/components/ui/button";
import { toast } from "sonner";

interface StatItem {
  title: string;
  value: string | number;
  category: "recharge" | "withdrawal" | "order" | "commission" | "transaction";
  timeframe: "today" | "yesterday" | "all-time";
}

// 使用模拟数据替代实际数据库查询，提高性能
const getMockData = () => {
  // 生成随机数字，模拟真实数据
  const randomValue = (min: number, max: number) => {
    return Math.floor(Math.random() * (max - min + 1) + min);
  };
  
  // 格式化金额
  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat('zh-CN', {
      style: 'currency',
      currency: 'CNY',
      minimumFractionDigits: 2
    }).format(value);
  };

  // 构建统计数据项
  const createStatItems = (): StatItem[] => [
    // 充值相关统计
    {
      title: "今日余额充值（USDT）",
      value: formatCurrency(randomValue(50000, 200000)),
      category: "recharge",
      timeframe: "today",
    },
    {
      title: "昨日余额充值（USDT）",
      value: formatCurrency(randomValue(40000, 180000)),
      category: "recharge",
      timeframe: "yesterday",
    },
    {
      title: "总余额充值（USDT）",
      value: formatCurrency(randomValue(5000000, 20000000)),
      category: "recharge",
      timeframe: "all-time",
    },
    
    // 提现相关统计
    {
      title: "今日提现金额",
      value: formatCurrency(randomValue(30000, 150000)),
      category: "withdrawal",
      timeframe: "today",
    },
    {
      title: "昨日提现金额",
      value: formatCurrency(randomValue(25000, 140000)),
      category: "withdrawal",
      timeframe: "yesterday",
    },
    {
      title: "总提现金额",
      value: formatCurrency(randomValue(3000000, 15000000)),
      category: "withdrawal",
      timeframe: "all-time",
    },
    
    // 订单相关统计
    {
      title: "今日充值笔数",
      value: randomValue(100, 500),
      category: "order",
      timeframe: "today",
    },
    {
      title: "昨日充值笔数",
      value: randomValue(80, 450),
      category: "order",
      timeframe: "yesterday",
    },
    {
      title: "总充值笔数",
      value: randomValue(10000, 50000),
      category: "order",
      timeframe: "all-time",
    },
    
    // 佣金相关统计
    {
      title: "今日返佣金额",
      value: formatCurrency(randomValue(5000, 20000)),
      category: "commission",
      timeframe: "today",
    },
    {
      title: "昨日返佣金额",
      value: formatCurrency(randomValue(4000, 18000)),
      category: "commission",
      timeframe: "yesterday",
    },
    {
      title: "总返佣金额",
      value: formatCurrency(randomValue(500000, 2000000)),
      category: "commission",
      timeframe: "all-time",
    },
    
    // 交易相关统计
    {
      title: "今日交易笔数",
      value: randomValue(200, 800),
      category: "transaction",
      timeframe: "today",
    },
    {
      title: "昨日交易笔数",
      value: randomValue(180, 750),
      category: "transaction",
      timeframe: "yesterday",
    },
    {
      title: "总交易笔数",
      value: randomValue(20000, 100000),
      category: "transaction",
      timeframe: "all-time",
    },
    // 额外的交易金额统计
    {
      title: "今日交易金额",
      value: formatCurrency(randomValue(100000, 500000)),
      category: "transaction",
      timeframe: "today",
    },
    {
      title: "昨日交易金额",
      value: formatCurrency(randomValue(90000, 450000)),
      category: "transaction",
      timeframe: "yesterday",
    },
    {
      title: "总交易金额",
      value: formatCurrency(randomValue(10000000, 50000000)),
      category: "transaction",
      timeframe: "all-time",
    },
  ];

  return {
    statItems: createStatItems()
  };
};

const StatisticsOverview = () => {
  const [isRefreshing, setIsRefreshing] = useState(false);

  // 使用React Query获取模拟统计数据
  const { data, isLoading, refetch } = useQuery({
    queryKey: ["dashboard-statistics"],
    queryFn: async () => {
      // 模拟网络延迟，但比真实数据库查询快得多
      await new Promise(resolve => setTimeout(resolve, 300));
      return getMockData();
    },
    refetchInterval: 60000, // 每分钟自动刷新一次
  });

  // 刷新数据
  const handleRefresh = async () => {
    setIsRefreshing(true);
    try {
      await refetch();
      toast.success("数据已刷新");
    } catch (error) {
      toast.error("刷新数据失败");
      console.error("刷新数据失败:", error);
    } finally {
      setIsRefreshing(false);
    }
  };

  // 根据类别和时间段过滤统计数据
  const filterStatItems = (category: StatItem["category"], timeframe?: StatItem["timeframe"]) => {
    if (!data?.statItems) return [];
    
    return data.statItems.filter(item => {
      if (timeframe) {
        return item.category === category && item.timeframe === timeframe;
      }
      return item.category === category;
    });
  };

  // 渲染统计卡片
  const renderStatCard = (item: StatItem) => (
    <Card key={`${item.category}-${item.timeframe}-${item.title}`} className="p-4 flex flex-col">
      <h3 className="text-sm text-gray-500 mb-1">{item.title}</h3>
      <p className="text-2xl font-bold">{item.value}</p>
    </Card>
  );

  return (
    <div className="space-y-8">
      <div className="flex justify-between items-center">
        <h2 className="text-xl font-bold">统计概览</h2>
        <Button
          size="sm"
          variant="outline"
          onClick={handleRefresh}
          disabled={isLoading || isRefreshing}
        >
          {isRefreshing ? (
            <>
              <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
              刷新中...
            </>
          ) : (
            <>
              <RefreshCw className="mr-2 h-4 w-4" />
              刷新数据
            </>
          )}
        </Button>
      </div>

      {isLoading ? (
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {Array(6)
            .fill(0)
            .map((_, index) => (
              <Card key={index} className="p-4 h-24 animate-pulse bg-gray-100">
                <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
                <div className="h-6 bg-gray-200 rounded w-1/2"></div>
              </Card>
            ))}
        </div>
      ) : (
        <>
          {/* 充值统计 */}
          <div>
            <h3 className="text-lg font-semibold mb-3">充值统计</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {filterStatItems("recharge").map(renderStatCard)}
            </div>
          </div>

          {/* 提现统计 */}
          <div>
            <h3 className="text-lg font-semibold mb-3">提现统计</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {filterStatItems("withdrawal").map(renderStatCard)}
            </div>
          </div>

          {/* 订单统计 */}
          <div>
            <h3 className="text-lg font-semibold mb-3">订单统计</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {filterStatItems("order").map(renderStatCard)}
            </div>
          </div>

          {/* 佣金统计 */}
          <div>
            <h3 className="text-lg font-semibold mb-3">佣金统计</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {filterStatItems("commission").map(renderStatCard)}
            </div>
          </div>

          {/* 交易统计 */}
          <div>
            <h3 className="text-lg font-semibold mb-3">交易统计</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {filterStatItems("transaction").map(renderStatCard)}
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default StatisticsOverview;
